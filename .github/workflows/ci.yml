name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # 前端建置與測試
  frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 安裝依賴
        run: npm ci

      - name: ESLint 程式碼檢查
        run: npm run lint:js

      - name: Prettier 格式檢查
        run: npx prettier --check '**/*.{js,css,html,md}'

      - name: Jest 單元測試
        run: npm run test:js

      - name: 上傳測試覆蓋率報告
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend

  # Python 資料處理測試
  python:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4

      - name: 設定 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 安裝 Python 依賴
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov ruff black bandit

      - name: Ruff 程式碼檢查
        run: ruff check *.py

      - name: Black 格式檢查
        run: black --check *.py

      - name: Bandit 安全掃描
        run: bandit -r *.py

      - name: Pytest 測試
        run: pytest --cov=. --cov-report=xml

      - name: 上傳 Python 覆蓋率報告
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: python

  # 效能與安全檢查
  quality:
    runs-on: ubuntu-latest
    needs: [frontend, python]

    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 安裝 Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: 啟動靜態伺服器
        run: |
          python3 -m http.server 8000 &
          sleep 5

      - name: Lighthouse 效能測試 (寬鬆標準)
        run: |
          # 使用寬鬆的效能標準
          lhci autorun --upload.target=temporary-public-storage --collect.url=http://localhost:8000 \
            --assert.assertions.performance=0.5 \
            --assert.assertions.accessibility=0.7 \
            --assert.assertions.best-practices=0.6 \
            --assert.assertions.seo=0.7
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # GitHub Pages 部署 (僅限 main 分支)
  deploy:
    runs-on: ubuntu-latest
    needs: [frontend, python, quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    # 設定 GitHub Pages 部署權限
    permissions:
      contents: read
      pages: write
      id-token: write

    # 防止並行部署
    concurrency:
      group: 'pages'
      cancel-in-progress: false

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4

      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 建置靜態檔案
        run: |
          # 確保所有靜態檔案都準備好
          echo "🔄 準備 GitHub Pages 部署檔案..."

          # 建立 build 目錄並複製所有必要檔案
          mkdir -p build
          cp -r *.html build/
          cp -r css/ build/ 2>/dev/null || true
          cp -r js/ build/ 2>/dev/null || true
          cp -r partials/ build/ 2>/dev/null || true
          cp -r txt/ build/ 2>/dev/null || true
          cp -r icon/ build/ 2>/dev/null || true
          cp -r docs/ build/ 2>/dev/null || true
          cp *.csv build/ 2>/dev/null || true
          cp *.json build/ 2>/dev/null || true

          # 建立 _config.yml 檔案 (GitHub Pages 設定)
          echo "plugins:" > build/_config.yml
          echo "  - jekyll-relative-links" >> build/_config.yml
          echo "relative_links:" >> build/_config.yml
          echo "  enabled: true" >> build/_config.yml
          echo "  collections: true" >> build/_config.yml

          # 建立 .nojekyll 檔案 (停用 Jekyll 處理)
          touch build/.nojekyll

          echo "✅ 靜態檔案建置完成"
          ls -la build/

      - name: 設定 GitHub Pages
        uses: actions/configure-pages@v4

      - name: 上傳 GitHub Pages 檔案
        uses: actions/upload-pages-artifact@v3
        with:
          path: './build'

      - name: 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
